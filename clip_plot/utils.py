# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_utils.ipynb.

# %% auto 0
__all__ = ['FILE_NAME', 'get_version', 'round_floats', 'is_number', 'timestamp', 'get_json_path', 'write_json', 'read_json',
           'copytree_agnostic', 'clean_filename']

# %% ../nbs/01_utils.ipynb 2
import os
import sys
import json
from typing import Any
import datetime
from shutil import copytree
from urllib.parse import unquote

from pathlib import Path

# %% ../nbs/01_utils.ipynb 3
FILE_NAME = "filename"  # Filename name key

# %% ../nbs/01_utils.ipynb 4
def get_version():
    """
    Return the version of clipplot installed
    Hardcoded for now
    """
    # return pkg_resources.get_distribution("clipplot").version
    return "0.0.1"

# %% ../nbs/01_utils.ipynb 6
def round_floats(obj, digits=5):
    """Return 2D array obj with rounded float precision"""
    return [[round(float(j), digits) for j in i] for i in obj]

# %% ../nbs/01_utils.ipynb 7
def is_number(s: str) -> bool:
    try:
        int(s)
        return True
    except ValueError:
        return False

# %% ../nbs/01_utils.ipynb 9
def timestamp():
    """Return a string for printing the current time"""
    return str(datetime.datetime.now()) + ":"

# %% ../nbs/01_utils.ipynb 11
def get_json_path(subdir: str, filename: str, *, out_dir: Path):
    """Return the path to a JSON file with conditional hash
    """
    if subdir:
        out_dir = out_dir / subdir
    return (out_dir/ filename).with_suffix(".json").as_posix()

# %% ../nbs/01_utils.ipynb 12
def write_json(output_path: Path, object: Any):
    """
    Write json object `obj` to disk and return the path to that file
    """
    output_path.parent.mkdir(parents=True, exist_ok=True)
    with output_path.open("w", encoding="utf-8") as out:
        json.dump(object, out, indent=4)

# %% ../nbs/01_utils.ipynb 13
def read_json(path: Path) -> dict:
    with path.open("r") as f:
        return json.load(f)

# %% ../nbs/01_utils.ipynb 15
def copytree_agnostic(a,b):
    if sys.version_info.major >=3 and sys.version_info.minor >=8:
        copytree(a, b, dirs_exist_ok=True)
    else:
        from distutils.dir_util import copy_tree
        copy_tree(a, b)

# %% ../nbs/01_utils.ipynb 17
def clean_filename(s: str) -> str:
    """Given a string that points to a filename, return a clean filename
    """
    s = unquote(os.path.basename(s))
    invalid_chars = '<>:;,"/\\|?*[]'
    for i in invalid_chars:
        s = s.replace(i, "")
    return s
