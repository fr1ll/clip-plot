# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/04_embeddings.ipynb.

# %% auto 0
__all__ = ['images_from_paths', 'images_iterator', 'embed_images', 'get_embeddings', 'write_embeddings']

# %% ../nbs/04_embeddings.ipynb 2
from pathlib import Path

import numpy as np
import torch
from PIL import Image
from tqdm.auto import tqdm
from transformers import pipeline

from .utils import timestamp


# %% ../nbs/04_embeddings.ipynb 4
def images_from_paths(pathlist):
    return (Image.open(p.as_posix()).convert("RGB").copy() for p in pathlist)

# %% ../nbs/04_embeddings.ipynb 5
def images_iterator(ImageEngine):
    return (img.original for img in ImageEngine)

# %% ../nbs/04_embeddings.ipynb 6
def embed_images(imagepaths : list[Path],
                 model_name : str = "timm/convnext_tiny.dinov3_lvd1689m",
                 batch_size : int = 4
                 ) -> np.ndarray:
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    print(f"Device for inference: {device}")
    pipe = pipeline(task="image-feature-extraction",
                    model=model_name, device=device, pool=True, use_fast=True)

    print(timestamp(), f"Creating embeddings using {model_name}")
    embeddings = []

    for out in tqdm(pipe([Path(p).as_posix() for p in imagepaths], batch_size=batch_size),
                    total=len(imagepaths)//batch_size):
        embeddings += out

    print(timestamp(), "Done creating embeddings.")

    return np.array(embeddings)

# %% ../nbs/04_embeddings.ipynb 7
def get_embeddings(ImageEngine,
                   model_name : str = "timm/convnext_tiny.dinov3_lvd1689m",
                   batch_size : int = 4
                   ) -> np.ndarray:
    return embed_images(ImageEngine.image_paths, model_name=model_name, batch_size=batch_size)

# %% ../nbs/04_embeddings.ipynb 8
def write_embeddings(embeddings : np.ndarray, names: list[str], dir: Path):
    """write out embeddings and return paths"""
    paths = [(dir/n).resolve() for n in names]
    for p, e in zip(paths, embeddings):
        np.save(p.with_suffix('.npy'), e)
    return paths

