# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/08_from_tables.ipynb.

# %% auto 0
__all__ = ['cat_tables', 'glob_to_tables', 'table_to_meta']

# %% ../nbs/08_from_tables.ipynb 3
import pandas as pd
import pyarrow.parquet as pq
from pathlib import Path
from glob import glob
from typing import Tuple, List

# %% ../nbs/08_from_tables.ipynb 4
def cat_tables(table_paths: list[Path]) -> pd.DataFrame:
    '''
    read and concatenate tables from list of paths
    '''
    extensions = {p.suffix.lower() for p in table_paths}
    if extensions not in [{".csv"}, {".parquet"}]:
        raise ValueError(f"All tables must have same extension, either .csv or .parquet. Got: {extensions}")
    if extensions == {".csv"}:
        dataset = [pd.read_csv(t) for t in table_paths]
        return pd.concat(dataset, ignore_index=True)
    elif extensions == {".parquet"}:
        dataset = pq.ParquetDataset(table_paths)
        return dataset.read().to_pandas()

# %% ../nbs/08_from_tables.ipynb 5
def glob_to_tables(pattern: str) -> pd.DataFrame:
    '''
    expand a glob of tables, read in the tables,
    and output as concatenated DataFrame
    '''
    table_paths = [Path(p) for p in glob(pattern, recursive=True)]
    if len(table_paths) == 0:
        raise FileNotFoundError("No tables matched.")
    return cat_tables(table_paths)


# %% ../nbs/08_from_tables.ipynb 8
def table_to_meta(table: pd.DataFrame) -> Tuple[List, List]:
    '''convert table to metadata columns and list'''
    # viewer expects filename column
    table = table.rename(columns={"image_filename": "filename"})
    meta_columns = set(table.columns) - set(["image_path", "embed_path"])
    # convert to list as pandas does not let you index with a set
    meta_columns = list(meta_columns)
    df_meta = table[meta_columns]
    return meta_columns, list(df_meta.to_dict(orient='index').values())
