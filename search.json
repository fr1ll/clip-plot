[
  {
    "objectID": "09_configuration.html",
    "href": "09_configuration.html",
    "title": "clip-plot",
    "section": "",
    "text": "Paths\n\n Paths (images:list[pathlib.Path]=[], tables:list[pathlib.Path]|None=None,\n        metadata:list[pathlib.Path]|None=None, table_id:str=&lt;factory&gt;,\n        output_dir:pathlib.Path=Path('/home/runner/work/clip-plot/clip-\n        plot/clipplot_output'),\n        table_format:Literal['parquet','csv']='parquet')\n\n*!!! abstract “Usage Documentation” Models\nA base class for creating Pydantic models.\nAttributes: class_vars: The names of the class variables defined on the model. private_attributes: Metadata about the private attributes of the model. signature: The synthesized __init__ [Signature][inspect.Signature] of the model.\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.*\n\n\n\nUmapSpec\n\n UmapSpec (n_neighbors:list[int]=[15], min_dist:list[float]=[0.1],\n           metric:typing.Annotated[str,'==SUPPRESS==']='correlation',\n           umap_on_full_dims:typing.Annotated[bool,'==SUPPRESS==']=True)\n\n*!!! abstract “Usage Documentation” Models\nA base class for creating Pydantic models.\nAttributes: class_vars: The names of the class variables defined on the model. private_attributes: Metadata about the private attributes of the model. signature: The synthesized __init__ [Signature][inspect.Signature] of the model.\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.*\n\n\n\nClusterSpec\n\n ClusterSpec (n_clusters:typing.Annotated[int,'==SUPPRESS==']=12,\n              max_clusters:typing.Annotated[int,'==SUPPRESS==']=10,\n              min_cluster_size:typing.Annotated[int,'==SUPPRESS==']=20)\n\n*!!! abstract “Usage Documentation” Models\nA base class for creating Pydantic models.\nAttributes: class_vars: The names of the class variables defined on the model. private_attributes: Metadata about the private attributes of the model. signature: The synthesized __init__ [Signature][inspect.Signature] of the model.\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.*\n\n\n\nCfg\n\n Cfg (_case_sensitive:bool|None=None,\n      _nested_model_default_partial_update:bool|None=None,\n      _env_prefix:str|None=None, _env_file:DotenvType|None=Path('.'),\n      _env_file_encoding:str|None=None, _env_ignore_empty:bool|None=None,\n      _env_nested_delimiter:str|None=None,\n      _env_nested_max_split:int|None=None,\n      _env_parse_none_str:str|None=None, _env_parse_enums:bool|None=None,\n      _cli_prog_name:str|None=None,\n      _cli_parse_args:bool|list[str]|tuple[str,...]|None=None,\n      _cli_settings_source:CliSettingsSource[Any]|None=None,\n      _cli_parse_none_str:str|None=None,\n      _cli_hide_none_type:bool|None=None, _cli_avoid_json:bool|None=None,\n      _cli_enforce_required:bool|None=None,\n      _cli_use_class_docs_for_groups:bool|None=None,\n      _cli_exit_on_error:bool|None=None, _cli_prefix:str|None=None,\n      _cli_flag_prefix_char:str|None=None,\n      _cli_implicit_flags:bool|None=None,\n      _cli_ignore_unknown_args:bool|None=None,\n      _cli_kebab_case:bool|None=None,\n      _cli_shortcuts:Mapping[str,str|list[str]]|None=None,\n      _secrets_dir:PathType|None=None, thumbnail_size:int=128,\n      model:str='timm/convnext_tiny.dinov3_lvd1689m',\n      umap_spec:__main__.UmapSpec=UmapSpec(n_neighbors=[15],\n      min_dist=[0.1], metric='correlation', umap_on_full_dims=True),\n      clipplot_version:str='0.1.1a9', plot_id:str=&lt;factory&gt;,\n      paths:__main__.Paths=Paths(images=[], tables=None, metadata=None,\n      table_id='c656c001-1c82-4884-bc33-0dab79bf3262',\n      output_dir=Path('/home/runner/work/clip-plot/clip-\n      plot/clipplot_output'), table_format='parquet'),\n      seed:typing.Annotated[int,'==SUPPRESS==']=42,\n      geojson:typing.Annotated[None|pathlib.Path,'==SUPPRESS==']=None,\n      shuffle:typing.Annotated[None|bool,'==SUPPRESS==']=False,\n      copy_web_only:typing.Annotated[bool,'==SUPPRESS==']=False,\n      use_cache:typing.Annotated[bool,'==SUPPRESS==']=False,\n      encoding:typing.Annotated[str,'==SUPPRESS==']='utf8',\n      pointgrid_fill:typing.Annotated[float,'==SUPPRESS==']=0.05,\n      cell_size:typing.Annotated[int,'==SUPPRESS==']=32,\n      lod_cell_height:typing.Annotated[int,'==SUPPRESS==']=128,\n      min_size:typing.Annotated[int,'==SUPPRESS==']=100,\n      gzip:typing.Annotated[bool,'==SUPPRESS==']=False,\n      logo:typing.Annotated[None|pathlib.Path,'==SUPPRESS==']=None,\n      tagline:Union[Annotated[NoneType,'==SUPPRESS=='],str]=None)\n\n*Base class for settings, allowing values to be overridden by environment variables.\nThis is useful in production for secrets you do not wish to save in code, it plays nicely with docker(-compose), Heroku and any 12 factor app design.\nAll the below attributes can be set via model_config.\nArgs: _case_sensitive: Whether environment and CLI variable names should be read with case-sensitivity. Defaults to None. _nested_model_default_partial_update: Whether to allow partial updates on nested model default object fields. Defaults to False. _env_prefix: Prefix for all environment variables. Defaults to None. _env_file: The env file(s) to load settings values from. Defaults to Path(''), which means that the value from model_config['env_file'] should be used. You can also pass None to indicate that environment variables should not be loaded from an env file. _env_file_encoding: The env file encoding, e.g. 'latin-1'. Defaults to None. _env_ignore_empty: Ignore environment variables where the value is an empty string. Default to False. _env_nested_delimiter: The nested env values delimiter. Defaults to None. _env_nested_max_split: The nested env values maximum nesting. Defaults to None, which means no limit. _env_parse_none_str: The env string value that should be parsed (e.g. “null”, “void”, “None”, etc.) into None type(None). Defaults to None type(None), which means no parsing should occur. _env_parse_enums: Parse enum field names to values. Defaults to None., which means no parsing should occur. _cli_prog_name: The CLI program name to display in help text. Defaults to None if _cli_parse_args is None. Otherwise, defaults to sys.argv[0]. _cli_parse_args: The list of CLI arguments to parse. Defaults to None. If set to True, defaults to sys.argv[1:]. _cli_settings_source: Override the default CLI settings source with a user defined instance. Defaults to None. _cli_parse_none_str: The CLI string value that should be parsed (e.g. “null”, “void”, “None”, etc.) into None type(None). Defaults to _env_parse_none_str value if set. Otherwise, defaults to “null” if _cli_avoid_json is False, and “None” if _cli_avoid_json is True. _cli_hide_none_type: Hide None values in CLI help text. Defaults to False. _cli_avoid_json: Avoid complex JSON objects in CLI help text. Defaults to False. _cli_enforce_required: Enforce required fields at the CLI. Defaults to False. _cli_use_class_docs_for_groups: Use class docstrings in CLI group help text instead of field descriptions. Defaults to False. _cli_exit_on_error: Determines whether or not the internal parser exits with error info when an error occurs. Defaults to True. _cli_prefix: The root parser command line arguments prefix. Defaults to ““. _cli_flag_prefix_char: The flag prefix character to use for CLI optional arguments. Defaults to ‘-’. _cli_implicit_flags: Whether bool fields should be implicitly converted into CLI boolean flags. (e.g. –flag, –no-flag). Defaults to False. _cli_ignore_unknown_args: Whether to ignore unknown CLI args and parse only known ones. Defaults to False. _cli_kebab_case: CLI args use kebab case. Defaults to False. _cli_shortcuts: Mapping of target field name to alias names. Defaults to None. _secrets_dir: The secret files directory or a sequence of directories. Defaults to None.*",
    "crumbs": [
      "09_configuration.html"
    ]
  },
  {
    "objectID": "embeddings.html",
    "href": "embeddings.html",
    "title": "Create and/or load embeddings",
    "section": "",
    "text": "images_from_paths\n\n images_from_paths (pathlist)\n\n\n\n\nimages_iterator\n\n images_iterator (ImageEngine)\n\n\n\n\nembed_images\n\n embed_images (imagepaths:list[pathlib.Path],\n               model_name:str='timm/convnext_tiny.dinov3_lvd1689m',\n               batch_size:int=4)\n\n\n\n\nget_embeddings\n\n get_embeddings (ImageEngine,\n                 model_name:str='timm/convnext_tiny.dinov3_lvd1689m',\n                 batch_size:int=4)\n\n\n\n\nwrite_embeddings\n\n write_embeddings (embeddings:numpy.ndarray, names:list[str],\n                   dir:pathlib.Path)\n\nwrite out embeddings and return paths",
    "crumbs": [
      "Create and/or load embeddings"
    ]
  },
  {
    "objectID": "12_hotspots.html",
    "href": "12_hotspots.html",
    "title": "clip-plot",
    "section": "",
    "text": "get_cluster_model\n\n get_cluster_model (min_cluster_size:int=15)\n\nReturn model with .fit() method that can be used to cluster input vectors\n\n\n\nget_hotspots\n\n get_hotspots (imageEngine:clip_plot.images.ImageFactory,\n               vecs:numpy.ndarray, output_dir:pathlib.Path, plot_id:str,\n               cluster_spec:clip_plot.configuration.ClusterSpec)\n\n*Return the stable clusters from the condensed tree of connected components from the density graph\nArgs: layouts (Optional[dict] = {}) use_high_dimensional_vectors (Optional[bool] = True) n_preproc_dims vecs umap = Used if use_high_dimensional_vectors is False max_clusters*",
    "crumbs": [
      "12_hotspots.html"
    ]
  },
  {
    "objectID": "metadata.html",
    "href": "metadata.html",
    "title": "Handle metadata (dates, categories, etc.)",
    "section": "",
    "text": "write_metadata\n\n write_metadata (imageEngine)\n\nWrite list metadata of objects to disk Tightly coupled to ImageEngine class\n\n\n\nget_manifest\n\n get_manifest (imageEngine, atlas_data, hidden_vectors:numpy.ndarray,\n               plot_id:str, output_dir:pathlib.Path,\n               umap_spec:clip_plot.configuration.UmapSpec,\n               cluster_spec:clip_plot.configuration.ClusterSpec,\n               has_metadata:bool=False)\n\nCreate and return the base object for the manifest output file Returns: None",
    "crumbs": [
      "Handle metadata (dates, categories, etc.)"
    ]
  },
  {
    "objectID": "from_tables.html",
    "href": "from_tables.html",
    "title": "from_tables",
    "section": "",
    "text": "cat_tables\n\n cat_tables (table_paths:list[pathlib.Path])\n\nread and concatenate tables from list of paths\n\n\n\nglob_to_tables\n\n glob_to_tables (pattern:str)\n\nexpand a glob of tables, read in the tables, and output as concatenated DataFrame\n\ndf = test_parquet()\n\n\n\n\ntable_to_meta\n\n table_to_meta (table:pandas.core.frame.DataFrame)\n\nconvert table to metadata columns and list",
    "crumbs": [
      "`from_tables`"
    ]
  },
  {
    "objectID": "02_compare.html",
    "href": "02_compare.html",
    "title": "Module is used to compare legacy outputs from pix-plot to clip-plot.",
    "section": "",
    "text": "The goal is catch unforeseen changes that modify the baseline outputs\n\n\nNamed files that will be compared when running compare_named_files()\n\n\nHelper Functions\n\n\n\nlog_output\n\n log_output (txt:str, space:Optional[int]=0)\n\n\n\n\ndelete_temp\n\n delete_temp ()\n\nDelete temporary directory\n\n\n\nclean_diff_output\n\n clean_diff_output (msg:List[str])\n\nClean differ.compare() output to only show difference\n\n\n\nmanifest_replace_write\n\n manifest_replace_write (manifest_filename)\n\nreplace dates and filenames in baseline manifest files\n\n\n\nfix_expected_diff\n\n fix_expected_diff ()\n\n*Update pix_plot manifest to match clip_plot manifest\nUpdates only: Creation date Directory references*\n\n\n\ncopy_file\n\n copy_file ()\n\ncopy baseline directory to temporary directory\n\n\nFunctions leveraging difflib.Differ()\n\n\n\ntry_read_text\n\n try_read_text (filename:pathlib.Path)\n\nCheck if file can be read as text\n\n\n\nuseful_text_diff\n\n useful_text_diff (file1:str, file2:str)\n\n*This function compares two files to return text difference, if they are textfiles.\nArgs: file1 (str): path for file 1 file2 (str): path for file 2\nReturns: tuple(bool, str): bool: true if files have a text difference str: feedback if file difference*\n\n\n\ncompare_named_files\n\n compare_named_files ()\n\nFunction loops named files in the COMPARE_FILES list to compare the files form the legacy output and the new output.\n\n\nFunctions leveraging filecmp.dircmp\n\n\n\ncomFile\n\n comFile ()\n\n*Compare two directories\nCall out missing files and folders and files with different content.*",
    "crumbs": [
      "Module is used to compare legacy outputs from pix-plot to clip-plot."
    ]
  },
  {
    "objectID": "images.html#resize-functions",
    "href": "images.html#resize-functions",
    "title": "Process images",
    "section": "Resize functions",
    "text": "Resize functions\n\n\nresize_to_max_side\n\n resize_to_max_side (img:PIL.Image.Image, n:int=128)\n\nresize to a maximum side length\n\n\n\nresize_to_height\n\n resize_to_height (img:PIL.Image.Image, height:int=128)\n\nresize to an exact height\n\n\nautocontrast_preserve_lightness\nSometimes, a thumbnail looks muddy and can benefit from boosting the contrast\n\n\n\nautocontrast\n\n autocontrast (img:PIL.Image.Image)\n\nautocontrast lifted from keras library added lightness normalization",
    "crumbs": [
      "Process images"
    ]
  },
  {
    "objectID": "images.html#atlases",
    "href": "images.html#atlases",
    "title": "Process images",
    "section": "Atlases",
    "text": "Atlases\n\n\ncreate_atlases_and_thumbs\n\n create_atlases_and_thumbs (imageEngine, plot_id, use_cache:bool=False)\n\ncreate folder with atlases in data dir\n\n\n\nget_image_paths\n\n get_image_paths (images:str)\n\n*Called once to provide a list of image paths.\nargs: images (str): directory location of images.\nreturns: image_paths list(str): list of image paths.*",
    "crumbs": [
      "Process images"
    ]
  },
  {
    "objectID": "images.html#align-metadata",
    "href": "images.html#align-metadata",
    "title": "Process images",
    "section": "Align metadata",
    "text": "Align metadata\nReally this should all just use a dataframe\n\n\nget_metadata_list\n\n get_metadata_list (meta_dir:str)\n\n*Return a list of objects with image metadata.\nWill create ‘tags’ key if ‘category’ is in metadata but not ‘tags’.\nArgs: metadata (str, default = None): Metadata location\nReturns: l (List[dict]): List of metadata\nNotes: No check for ‘filename’ is performed\nTodo: Think about separating .csv and json functionality. Can we use pandas numpy to process csv?*\n\n\n\nValidImage\n\n ValidImage (img_path:pathlib.Path, metadata:dict|None=None)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "Process images"
    ]
  },
  {
    "objectID": "images.html#image-factory",
    "href": "images.html#image-factory",
    "title": "Process images",
    "section": "Image Factory",
    "text": "Image Factory\nOur goal is to provide an extensible backbone for clip-plot by implementing an agnostic image engine. Images and their metadata might need to be processed from different sources.\nIn addition the fallowing issues must be handled by the image engine: - Matching metadata with their images - Handling non-unique image names\n\n\n\nimage-2.png\n\n\n\n\nImageFactory\n\n ImageFactory (img_path, data_dir, meta_dir, options={})\n\n*Class encapsulates functionality required to access images, including compiling metadata.\nFactory is responsible : - Compiling image files and their metadata - Filtering and validating images - Naming image output names - Providing property values\nImage factory needs to be able to provide an Image instance - The image instance needs to be have it’s metadata (if applicable)\nNotes: Class and their children are required to provide the following properties: data_dir shuffle atlas_size cell_size lod_cell_height*\n\n\n\nImageFactoryBase\n\n ImageFactoryBase (data_dir:str)\n\n*Class encapsulates functionality required to access images, including compiling metadata.\nFactory is responsible : - Compiling image files and their metadata - Filtering and validating images - Naming image output names - Providing property values\nImage factory needs to be able to provide an Image instance - The image instance needs to be have it’s metadata (if applicable)\nNotes: Class and their children are required to provide the following properties: data_dir shuffle atlas_size cell_size lod_cell_height*",
    "crumbs": [
      "Process images"
    ]
  },
  {
    "objectID": "clip_plot.html",
    "href": "clip_plot.html",
    "title": "Imports and setup",
    "section": "",
    "text": "Note that I have removed the “copy-web-only” conditional import path for now\nnbdev does not like cells to have cells to have code and imports in the same cell:\nhttps://nbdev.fast.ai/getting_started.html#q-what-is-the-warning-found-a-cell-containing-mix-of-imports-and-computations.-please-use-separate-cells\nI think this may mean we don’t get to do conditional imports. If we find a code path that really should have conditional imports, we can see if there is a workaround. For now, I don’t feel “copy web only” is a very important functionality to keep.",
    "crumbs": [
      "Imports and setup"
    ]
  },
  {
    "objectID": "clip_plot.html#entry",
    "href": "clip_plot.html#entry",
    "title": "Imports and setup",
    "section": "Entry",
    "text": "Entry\nproject_images will kick off all the main functions for the module",
    "crumbs": [
      "Imports and setup"
    ]
  },
  {
    "objectID": "clip_plot.html#carlos-test-functions",
    "href": "clip_plot.html#carlos-test-functions",
    "title": "Imports and setup",
    "section": "Carlo’s Test Functions",
    "text": "Carlo’s Test Functions\n\nNeed to remove later\n\n\n\ntest_no_meta_dir\n\n test_no_meta_dir (config)\n\n\n\n\ntest_butterfly_missing_meta\n\n test_butterfly_missing_meta (config)\n\n\n\n\ntest_butterfly_duplicate\n\n test_butterfly_duplicate (config)",
    "crumbs": [
      "Imports and setup"
    ]
  },
  {
    "objectID": "layouts.html#layouts-and-their-inputs",
    "href": "layouts.html#layouts-and-their-inputs",
    "title": "Create layouts (dimensionality reduction, other)",
    "section": "Layouts and their inputs",
    "text": "Layouts and their inputs\nIt’s useful to think of layouts and the required data to generate them:\n\nNo data:\n\nalphabetical layout\n\nOnly requires the total amount of images to generate the layout\n\n\n\n\nEmbeddings:\n\numap layout\n\nUses embeddings (vecs) to generate layout\nUnder some circumstances it will uses metadata (labels)\n\nrasterfairy\n\nuses umap layout\n\n\n\n\nMetadata:\n\ncategorical layout\n\nuses “category” data from metadata\n\ndate layout\n\nuses “date” data from metadata\n\ncustom layout\n\nuses “x” & “y” data from metadata\n\ngeographic layout: dropped for now",
    "crumbs": [
      "Create layouts (dimensionality reduction, other)"
    ]
  },
  {
    "objectID": "layouts.html#layouts-and-their-outputs",
    "href": "layouts.html#layouts-and-their-outputs",
    "title": "Create layouts (dimensionality reduction, other)",
    "section": "Layouts and their outputs",
    "text": "Layouts and their outputs\nIt’s useful to think of layouts and how they output their data (to be consumed by the web application)\nAll layouts output a .json composed of list of list as follows:\n\n[     [         x, # x-coordinate of 1st image         y # y-coordinate of 1st image     ],     [         x, # x-coordinate of 2nd image         y # y-coordinate of 2nd image     ],     . . . ,]\n\nSome layouts will also output a label file specifying labels and their position: - Category layouts - Date layouts (named “timeline-{plot_id}.json” and “timeline-labels-{plot_id}.json”)\nAll layouts (and their label file if applicable) are specified in the manifest.json \nThe umap layout is unique in the cense that you can create “variants” by specifying more than one n_neighbors and/or min_dist.\nClip-plot will generate len(n_neighbors) * len(min_dist) number of variants:\n- E.g. n_neighbors=[7,15] and min_dist=[.005, .001] will generate 2*2=4 variants\nEach variant is saved as its own file (e.g. “umap-n_neighbors_{n_neighbors_}-min_dist_{min_dist}-{plot_id}.json”)\nIn addition, each variant (even if there is only one), will have a jittered file saved as well\n\n\n\nimage.png\n\n\n\n\nwrite_layout\n\n write_layout (path:pathlib.Path, obj:Any, scale:bool=True,\n               round:bool=True)\n\nWrite layout json obj to disk and return the path to the saved file\n\n\n\nAlphabeticLayout\n\n AlphabeticLayout (plot_id, imageEngine)\n\nHelper class that provides a standard way to create an ABC using inheritance.\n\n\n\nBaseMetaLayout\n\n BaseMetaLayout (plot_id, imageEngine)\n\nHelper class that provides a standard way to create an ABC using inheritance.\n\n\n\nBaseLayout\n\n BaseLayout (plot_id:str, output_dir:pathlib.Path)\n\nHelper class that provides a standard way to create an ABC using inheritance.\n\n\n\nget_categorical_points\n\n get_categorical_points (arr:numpy.ndarray, unit_size=None)\n\nGiven an array of Box() objects, return a 2D distribution with shape (n_cells, 2)\n\n\n\nget_categorical_boxes\n\n get_categorical_boxes (group_counts:list[int], margin=2)\n\n@arg [int] group_counts: counts of the number of images in each distinct level within the metadata’s categories @kwarg int margin: space between boxes in the 2D layout @returns Box an array of Box() objects; one per level in group_counts\n\n\n\nBox\n\n Box (*args)\n\nStore the width, height, and x, y coords of a box\n\n\n\nCategoricalLayout\n\n CategoricalLayout (plot_id, imageEngine)\n\nHelper class that provides a standard way to create an ABC using inheritance.\n\n\n\nCustomLayout\n\n CustomLayout (plot_id, imageEngine)\n\nHelper class that provides a standard way to create an ABC using inheritance.\n\n\n\nget_pointgrid_layout\n\n get_pointgrid_layout (input_path:pathlib.Path, output_dir:pathlib.Path,\n                       label, plot_id:str)\n\nGridify the positions in path and return the path to this new layout Args: path (str) label (str)\n\n\n\nget_rasterfairy_layout\n\n get_rasterfairy_layout (output_dir:pathlib.Path, plot_id:str,\n                         umap_json_path:pathlib.Path)\n\nCreate regular grid layout that keeps umap XYs close to each other\n\n\n\nget_single_umap_model\n\n get_single_umap_model (umap_spec:clip_plot.configuration.UmapSpec,\n                        seed:int|None=None)\n\nunpack params list and handle UMAP not letting transform_seed be None\n\n\n\nget_umap_layout_or_layouts\n\n get_umap_layout_or_layouts (v:numpy.ndarray, imageEngine,\n                             umap_spec:clip_plot.configuration.UmapSpec,\n                             output_dir:pathlib.Path, plot_id:str)\n\nCreate a multi-layout UMAP projection Args: v (array like object) n_neighbors min_dist images\n\n\n\nget_heightmap\n\n get_heightmap (json_path:pathlib.Path, label:str,\n                output_dir:pathlib.Path)\n\nCreate a heightmap using the distribution of points stored at path Args: path label output_dir\n\n\n\nget_layouts\n\n get_layouts (imageEngine:clip_plot.images.ImageFactory,\n              hidden_vectors:numpy.ndarray, output_dir:pathlib.Path,\n              plot_id:str, umap_spec:clip_plot.configuration.UmapSpec)\n\nGet the image positions in each projection",
    "crumbs": [
      "Create layouts (dimensionality reduction, other)"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Clip-Plot",
    "section": "",
    "text": "The goal of this repo is to modify pix-plot to work as a front end for exploring any image embeddings, for example those from clip_retrieval.\nIf you want to go directly from a folder of JPGs to a PixPlot visualization, you should use pix-plot itself.\nThis is merely a work-in-progress attempt to enable you to generate a PixPlot visualization after creating embeddings.\nWhy do this? 1. clip gives useful embeddings as shown by the first place solution in the recent “Google Universal Image Embeddings” Kaggle competition 2. Separating the embeddings step gives more flexibility in how it is run – for example, it can be run in parallel on several nodes 3. Separating the embeddings step also makes it easier to remove pinned dependencies so the exciting viz stuff is easier to install\nInitial ambitions coming from PixPlot:\n\n☑️ Unpin requirements versions\n⬛ Remove all TensorFlow dependencies\n⬛ Enable to go directly from what you’d expect to have after running clip-retrieval inference: i.e. a folder of JPGs and a folder with embeddings in numpy format\n\nLater ambitions\n\n⬛ Add a linear dimensionality reduction method to complement UMAP\n⬛ Include option to output as a desktop app via Tauri\n⬛ BYO logo",
    "crumbs": [
      "Clip-Plot"
    ]
  },
  {
    "objectID": "index.html#work-in-progress",
    "href": "index.html#work-in-progress",
    "title": "Clip-Plot",
    "section": "",
    "text": "The goal of this repo is to modify pix-plot to work as a front end for exploring any image embeddings, for example those from clip_retrieval.\nIf you want to go directly from a folder of JPGs to a PixPlot visualization, you should use pix-plot itself.\nThis is merely a work-in-progress attempt to enable you to generate a PixPlot visualization after creating embeddings.\nWhy do this? 1. clip gives useful embeddings as shown by the first place solution in the recent “Google Universal Image Embeddings” Kaggle competition 2. Separating the embeddings step gives more flexibility in how it is run – for example, it can be run in parallel on several nodes 3. Separating the embeddings step also makes it easier to remove pinned dependencies so the exciting viz stuff is easier to install\nInitial ambitions coming from PixPlot:\n\n☑️ Unpin requirements versions\n⬛ Remove all TensorFlow dependencies\n⬛ Enable to go directly from what you’d expect to have after running clip-retrieval inference: i.e. a folder of JPGs and a folder with embeddings in numpy format\n\nLater ambitions\n\n⬛ Add a linear dimensionality reduction method to complement UMAP\n⬛ Include option to output as a desktop app via Tauri\n⬛ BYO logo",
    "crumbs": [
      "Clip-Plot"
    ]
  },
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "Clip-Plot",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nclip-plot is a fork of pix-plot by Douglas Duhaime, Peter Leonard, and others, and is mainly a lighter, smaller version of their work.\nThe DHLab would like to thank Cyril Diagne and Nicolas Barradeau, lead developers of the spectacular Google Arts Experiments TSNE viewer, for generously sharing ideas on optimization techniques used in this viewer, and Lillianna Marie for naming this viewer PixPlot.",
    "crumbs": [
      "Clip-Plot"
    ]
  },
  {
    "objectID": "web_config.html",
    "href": "web_config.html",
    "title": "Manage web assets",
    "section": "",
    "text": "get_clip_plot_root\n\n get_clip_plot_root ()\n\n\n\n\nreplace_web_strings\n\n replace_web_strings (web_dir:pathlib.Path, from_to:dict)\n\nsequentially replace strings based on dict\n\n\n\nbyo_logo\n\n byo_logo (web_dir:pathlib.Path, logo_path:pathlib.Path)\n\ncopy logo into web folder and replace reference in index.html\n\n\n\ncopy_web_assets\n\n copy_web_assets (output_dir:pathlib.Path, tagline:str, logo:str)\n\nCopy the /web directory from the clipplot source to the users cwd. Copies version number into assets.",
    "crumbs": [
      "Manage web assets"
    ]
  },
  {
    "objectID": "10_embed_to_tables.html",
    "href": "10_embed_to_tables.html",
    "title": "clip-plot",
    "section": "",
    "text": "embed_to_tables_pipeline\n\n embed_to_tables_pipeline (images:list[pathlib.Path]=[],\n                           embed_model:str='timm/convnext_tiny.dinov3_lvd1\n                           689m', output_dir:pathlib.Path=Path('/home/runn\n                           er/work/clip-plot/clip-plot/clipplot_output'),\n                           metadata:list[pathlib.Path]|None=None, table_id\n                           :str='5798ad3a-29a0-41f7-9f09-29d395caa357', ta\n                           ble_format:Literal['parquet','csv']='parquet',\n                           local_only:bool=False)\n\nEmbed a folder of images and save embeddings as .npy file to disk\n\n\n\nembed_to_tables_cli\n\n embed_to_tables_cli ()\n\nrun embed_to_tables with CLI defined from pydantic-settings configuration object",
    "crumbs": [
      "10_embed_to_tables.html"
    ]
  },
  {
    "objectID": "01_utils.html#number-utilities",
    "href": "01_utils.html#number-utilities",
    "title": "clip-plot",
    "section": "Number utilities",
    "text": "Number utilities\n\n\nround_floats\n\n round_floats (obj, digits=5)\n\nReturn 2D array obj with rounded float precision\n\n\n\nis_number\n\n is_number (s:str)",
    "crumbs": [
      "Number utilities"
    ]
  },
  {
    "objectID": "01_utils.html#time-and-date-utilities",
    "href": "01_utils.html#time-and-date-utilities",
    "title": "clip-plot",
    "section": "Time and date utilities",
    "text": "Time and date utilities\n\n\ntimestamp\n\n timestamp ()\n\nReturn a string for printing the current time",
    "crumbs": [
      "Number utilities"
    ]
  },
  {
    "objectID": "01_utils.html#path-and-file-utilities",
    "href": "01_utils.html#path-and-file-utilities",
    "title": "clip-plot",
    "section": "Path and file utilities",
    "text": "Path and file utilities\n\n\nget_json_path\n\n get_json_path (output_dir:pathlib.Path, subdir:str|None,\n                plot_id:str|None, filename:str)\n\nCombine path and add json extension\n\n\n\nwrite_json\n\n write_json (output_path:pathlib.Path, object:Any)\n\nWrite json object obj to disk and return the path to that file\n\n\n\nread_json\n\n read_json (path:pathlib.Path)\n\n\n\nCross-version copy tree\nThis is copied from _copytree in nbdev.quarto.\nWe put this in a separate module for one main reason:\nWhen we import this module, we can use its __file__ attribute (available when you import anything) to define the source for copying our web files.\n\n\n\ncopytree_agnostic\n\n copytree_agnostic (a, b)\n\n\n\nFilename-related functions\n\n\n\nclean_filename\n\n clean_filename (s:str)\n\nGiven a string that points to a filename, return a clean filename",
    "crumbs": [
      "Number utilities"
    ]
  },
  {
    "objectID": "11_tables_to_viewer.html",
    "href": "11_tables_to_viewer.html",
    "title": "clip-plot",
    "section": "",
    "text": "tables_to_viewer_pipeline\n\n tables_to_viewer_pipeline (tables:list[pathlib.Path]=None,\n                            output_dir:pathlib.Path=Path('/home/runner/wor\n                            k/clip-plot/clip-plot/clipplot_output'),\n                            tagline:str=None, logo:str=None)\n\nFrom a set of tables with embed_path and image_path columns, generate a clipplot viewer\n\n\n\ntables_to_viewer_cli\n\n tables_to_viewer_cli ()\n\nrun embed_to_tables with CLI defined from pydantic-settings configuration object",
    "crumbs": [
      "11_tables_to_viewer.html"
    ]
  }
]